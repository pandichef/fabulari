"""
Django settings for openai_django project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
OPENAI_API_KEY = os.environ.get("OPENAI_API_KEY", "")

ON_PYTHONANYWHERE = True if os.getenv("PYTHONANYWHERE_DOMAIN") else False

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# if os.name == "posix":
if ON_PYTHONANYWHERE:
    ALLOWED_HOSTS = [
        f"{os.environ['USER']}.pythonanywhere.com",
    ]
else:
    ALLOWED_HOSTS = [
        "127.0.0.1",
        "localhost",
    ]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # my apps
    "django_extensions",
    "accounts",
    "main",
]


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",  # for internationalization
    "config.middleware.UserLanguageMiddleware"
    # "base_app.check_job_status.CheckJobStatus",
]

##########################
# For Django Debug Toolbar
# if not ON_PYTHONANYWHERE:
#     INSTALLED_APPS += ["debug_toolbar"]
#     MIDDLEWARE += [
#         "debug_toolbar.middleware.DebugToolbarMiddleware",
#     ]
#     INTERNAL_IPS = ["127.0.0.1"]  # for Django Debug Toolbar

#     def show_toolbar(request):
#         # return str(request.user) == "username"
#         return request.user.is_superuser

#     DEBUG_TOOLBAR_CONFIG = {
#         "SHOW_TOOLBAR_CALLBACK": "config.settings.show_toolbar",
#         "INTERCEPT_REDIRECTS": False,
#     }
##########################

##########################
# For Django Silk
# INSTALLED_APPS += ["silk"]
# MIDDLEWARE += [
#     "silk.middleware.SilkyMiddleware",
# ]
# SILKY_DYNAMIC_PROFILING = [
#     {"module": "stocks.admin", "function": "StockAdmin.get_readonly_fields"}
# ]
##########################


ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
# if os.name == "posix":
if ON_PYTHONANYWHERE:
    from dotenv import load_dotenv

    load_dotenv(
        f"/home/{os.environ['USER']}/.env"
    )  # take environment variables from .env.
    # DATABASES = {
    #     "default": {
    #         "ENGINE": "django.db.backends.sqlite3",
    #         "NAME": BASE_DIR / "db.sqlite3",
    #     }
    # }
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": f"{os.environ['USER']}$default",  # Database name
            "USER": os.environ["MYSQL_USERNAME"],
            "PASSWORD": os.environ["MYSQL_USER_PASSWORD"],
            "HOST": f"{os.environ['USER']}.mysql.pythonanywhere-services.com",  # Database host address
            "PORT": "",  # Leave it empty for default MySQL port (3306)
        }
    }
else:  # local dev on windows
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.mysql",
            "NAME": "fabulari",  # Database name
            "USER": os.environ["MYSQL_USERNAME"],
            "PASSWORD": os.environ["MYSQL_USER_PASSWORD"],
            "HOST": "localhost",  # Database host address
            "PORT": "",  # Leave it empty for default MySQL port (3306)
        }
    }
# Requires full text search to be set up
# ALTER TABLE base_app_example ADD FULLTEXT INDEX (prompt_text, completion_text);


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

# LANGUAGE_CODE = "en-us"
LANGUAGE_CODE = "en"

# TIME_ZONE = "America"
TIME_ZONE = "America/Chicago"

USE_I18N = True

USE_TZ = True  # to store all dates as UTC in the database

# USE_L10N = True  # This setting is deprecated. Starting with Django 5.0, localized formatting of data will always be enabled.

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"
MEDIA_URL = "media/"

# if os.name == "posix":
if ON_PYTHONANYWHERE:
    STATIC_ROOT = f"/home/{os.environ['USER']}/static"  # prod only
    MEDIA_ROOT = f"/home/{os.environ['USER']}/media"  # prod only
else:
    MEDIA_ROOT = "/django_media_dev"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.CustomUser"  # new

# SYSTEM_CONTENT = "Provide advice related to taxes, accounting, or other services for residents and visitors of Puerto Rico."
# SYSTEM_CONTENT = """
# You are helpful assistant.
# """
# SYSTEM_CONTENT = """
# You are ChatPR, a friendly and casual chatbot specializing in providing detailed information about taxes and services in Puerto Rico, including complex topics like the Act 60 Resident Investor Program. Your role is to offer specific guidance on tax regulations, residency requirements, and public services, tailored to the needs of each user. While you can provide detailed information, remind users that for personalized and legal advice, consulting a tax professional or legal advisor is recommended. You maintain a conversational tone, making complex information more accessible. If a query is beyond your scope or requires professional expertise, advise users accordingly. When more details are needed for clarity, ask follow-up questions.
# """

# MINIMUM_NUMBER_OF_EXAMPLES_PER_OPENAI_JOB = 10  # OpenAI API requires at least 10
# OPENAI_MODEL_OVERRIDE = None  # force this base model i.e., ignore fine-tuned models
# """gpt-4-1106-preview"""


# https://platform.openai.com/docs/models/
# if ON_PYTHONANYWHERE:
#     BASE_OPENAI_MODEL = "gpt-4o"
# else:
#     BASE_OPENAI_MODEL = "gpt-3.5-turbo"  # used for first fine tuning job

# OPENAI_LLM_MODEL = "gpt-4o-mini"
# # OPENAI_LLM_MODEL = model="gpt-4o-mini"
# # OPENAI_EMBEDDINGS_MODEL = "text-embedding-ada-002"
# OPENAI_EMBEDDINGS_MODEL = "text-embedding-3-large"
# # OPENAI_EMBEDDINGS_MODEL = "text-similarity-davinci-001"

# EMAIL SETTINGS FOR READER
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("GMAIL_USERNAME", "")
EMAIL_HOST_PASSWORD = os.environ.get("GMAIL_PASSWORD", "")

# OPENAI MODELS
OPENAI_LLM_MODEL_SIMPLE_TASKS = "gpt-4o-mini"
OPENAI_EMBEDDINGS_MODEL = "text-embedding-3-large"

# LANGUAGE_CHOICES = [
#     ("en", "English"),
#     ("es", "Spanish"),
#     ("ru", "Russian"),
#     ("he", "Hebrew"),
#     ("ar", "Arabic"),
#     ("zh", "Chinese"),
#     ("de", "German"),
#     ("la", "Latin"),
#     ("fr", "French"),
#     # Add more languages as needed
# ]

from purepython.settings import LANGUAGE_CHOICES, SUPPORTED_LANGUAGES

# SUPPORTED_LANGUAGES = [code for code, _ in LANGUAGE_CHOICES]

# LANGUAGE_CODE = "en-us"
# USE_I18N = True
# LANGUAGE_CODE = "en"  # Spanish
# USE_I18N = True  # browser language
# USE_L10N = True  # local datetime
# USE_TZ = True

# LANGUAGES = [
#     ("es", "Spanish"),
#     ("en", "English"),  # Add other languages you want to support
# ]

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale"),)

