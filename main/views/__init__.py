from main.models import LANGUAGE_CHOICES
from django import forms
from markdown2 import markdown
from datetime import datetime
import os
import numpy as np
from accounts.models import supported_languages as SUPPORTED_LANGUAGES
from requests.exceptions import ProxyError
from django.core.mail import send_mail
from purepython.assess_cefr_level import get_my_level, tuple_list_to_csv
from purepython.create_study_materials import create_article, create_article_title
from django import forms
from django.utils import timezone
from django.conf import settings
from django.db.models.functions import Abs
from django.shortcuts import render, HttpResponse, redirect
from purepython.practice_translation import (
    generate_full_sentence,
    to_native_language,
    from_native_language,
    compute_cosine_similarity,
    get_embeddings,
    get_feedback,
)
from django.db import IntegrityError
from django.db.models import Avg, FloatField, F, ExpressionWrapper, Func, Value, StdDev
from main.models import Phrase
from accounts.models import LANGUAGE_CHOICES
from purepython.practice_translation import OPENAI_EMBEDDINGS_MODEL
from purepython.create_phrase_object import phrase_to_native_language
from purepython.import_from_readwise import (
    fetch_from_export_api,
    make_digest,
    make_digest_multithreaded,
)
from django.contrib import messages
import pprint
from purepython.practice_translation import OPENAI_LLM_MODEL
from ..admin import PhraseAdmin
from django.utils.safestring import mark_safe
from purepython.create_study_materials import create_readwise_item


from .add_multiple_phrases import add_multiple_phrases_view
from .assess_cefr_level import assess_cefr_level_view
from .create_study_materials import create_study_materials_view
from .export_phrases_to_csv import export_phrases_to_csv_view
from .import_from_readwise import import_from_readwise_view
from .practice_translation import practice_translation_view


# def redirect_to_previous_page(request, fallback_url="/"):
#     return redirect(request.META.get("HTTP_REFERER", fallback_url))

# def collect_readwise_articles_view(request):
#     # STOPPED USING THIS; TOO COMPLICATED TO MAINTAIN
#     if request.user.email and request.user.readwise_api_key:
#         print("yes")
#         try:
#             limit = 50
#             success_count, fail_count = collect_readwise_articles(
#                 token=request.user.readwise_api_key,
#                 updated_after=request.user.last_readwise_update_articles.isoformat(),
#                 # updated_after=None,
#                 recipient_list=[request.user.email],
#                 limit=limit,
#             )
#             fail_message = (
#                 f"""{fail_count} failed to send, likely due to an SMTP server issue.  """
#                 if fail_count
#                 else ""
#             )
#             up_to_date_message = (
#                 "There are no new summaries currently.  "
#                 if success_count + fail_count == 0
#                 else ""
#             )
#             limit_message = (
#                 f"Collecting summarizes is limited to {limit} articles due to server constraints.  "
#                 if success_count + fail_count == limit
#                 else ""
#             )
#             messages.success(
#                 request,
#                 f"""Successfully forwarded {success_count} emails.  """
#                 + fail_message
#                 + up_to_date_message
#                 + limit_message,
#             )
#             request.user.last_readwise_update_articles = datetime.now()
#             request.user.save()
#         except ConnectionError:
#             messages.success(
#                 request,
#                 f"The request do the Readwise API failed.  Try again in a few minutes.",
#             )
#         except Exception as err:
#             messages.error(
#                 request, f"{err}",
#             )
#     else:
#         messages.success(
#             request,
#             mark_safe(
#                 f"""The "Collect Readwise Summaries" feature collects article summarizies generated by Readwise and forwards them to your email address.
# You must provide an email address and a <a href="https://readwise.io/access_token">Readwise API key</a> in your <a href="/admin/accounts/customuser/{request.user.id}/change">Settings</a>.
# Note that Readwise is not a free service.
# """
#             ),
#         )
#     return redirect_to_previous_page(request)
